version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gomoku-postgres
    environment:
      POSTGRES_DB: gomoku_db
      POSTGRES_USER: gomoku_user
      POSTGRES_PASSWORD: gomoku_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gomoku_user -d gomoku_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gomoku-net

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: gomoku-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gomoku-net

  # Zookeeper (for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: gomoku-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - gomoku-net

  # Kafka (for event streaming - Phase 5)
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: gomoku-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - gomoku-net

  # AI Service (Flask) - Stateless AI calculations using minimax
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    container_name: gomoku-ai-service
    ports:
      - "8000:8000"
    environment:
      FLASK_APP: app.py
      FLASK_ENV: production
      PYTHONUNBUFFERED: 1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - gomoku-net

  # Spring Boot Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gomoku-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ai-service:
        condition: service_started
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/gomoku_db
      SPRING_DATASOURCE_USERNAME: gomoku_user
      SPRING_DATASOURCE_PASSWORD: gomoku_password
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      AI_SERVICE_URL: http://ai-service:8000
    networks:
      - gomoku-net

  # pgAdmin - PostgreSQL GUI (http://localhost:5050)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: gomoku-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@gomoku.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - gomoku-net

  # Redis Commander - Redis GUI (http://localhost:8081)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: gomoku-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - gomoku-net

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:

networks:
  gomoku-net:
    driver: bridge
